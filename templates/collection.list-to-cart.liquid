{% paginate collection.products by 20 %}

{% include 'breadcrumb' %}
{% assign has_sidebar = false %}
{% if collection.all_tags.size > 0 %}
  {% assign has_sidebar = true %}
{% endif %}

<div class="grid grid-border collection-list">

  {% if has_sidebar %}
  <div class="grid-item large--one-fifth collection-filters" id="collectionFilters">
    {% include 'collection-sidebar' %}
  </div>
  {% endif %}

  <div class="grid-item{% if has_sidebar %} large--four-fifths grid-border--left{% endif %}">

    {% comment %}
      Different markup if description is set
    {% endcomment %}
    
    {% if collection.description != blank %}
      <header class="section-header">
        <h1 class="section-header--title">{{ collection.title }}</h1>
        <div class="rte rte--header">
          {{ collection.description }}
        </div>
      </header>
      <hr{% if has_sidebar %} class="hr--offset-left"{% endif %}>
      <div class="section-header">
        <div class="section-header--right">
          {% include 'collection-sorting' %}
          {% include 'collection-views' %}
          {% include 'toggle-filters' %}
        </div>
      </div>
    {% else %}
    <header class="section-header">
      <h1 class="section-header--title section-header--left">{{ collection.title }}</h1>
      <div class="section-header--right">
        {% include 'collection-sorting' %}
        {% include 'collection-views' %}
        {% include 'toggle-filters' %}
      </div>
    </header>
    {% endif %}

    <div class="grid-uniform">
      {% for product in collection.products %}
      {% include 'bold-set-prices' with product %}

        {% include 'product-list-to-cart-item' %}

      {% else %}

        <div class="grid-item">
          <p>{{ 'collections.general.no_matches' | t }}</p>
        </div>

      {% endfor %}

    </div>

  </div>

  {% if paginate.pages > 1 %}
  <div class="grid-item pagination-border-top">
    <div class="grid">
      <div class="grid-item{% if has_sidebar %} large--four-fifths push--large--one-fifth{% endif %}">
          <div class="text-center">
            {% include 'pagination-custom' %}
          </div>
      </div>
    </div>
  </div>
  {% endif %}

</div>

{% endpaginate %}

{% if collection.products_count > 0 %}
<script>

var _config = {
  
  // What you might want to change
  addToCartBtnLabel:             'Add to Cart',
  addedToCartBtnLabel:           'Thank you!',
  addingToCartBtnLabel:          'Adding...',
  soldOutBtnLabel:               'Sold Out',
  howLongTillBtnReturnsToNormal: 2000, // in milliseconds.
  cartCountSelector:             '.cart-count, #cart-count a:first, #gocart p a, #cart .checkout em, .item-count',
  cartTotalSelector:             '#cart-price',
  // 'aboveForm' for top of add to cart form, 
  // 'belowForm' for below the add to cart form, and 
  // 'nextButton' for next to add to cart button.
  feedbackPosition:              'nextButton',
  
  // What you will never need to change
  addToCartBtnSelector:          '[type="submit"]',
  addToCartFormSelector:         'form[action="/cart/add"]',
  shopifyAjaxAddURL:             '/cart/add.js',
  shopifyAjaxCartURL:            '/cart.js'
};

  var _setText = function($button, label) {
  if ($button.children().length) {
    $button.children().each(function() {
      if ($.trim($(this).text()) !== '') {
        $(this).text(label);
      }
    });
  }
  else {
    $button.val(label).text(label);
  }
};

Shopify.itemsToAdd = [];
Shopify.addItemtoTheCart = function($addToCartBtn) {
  if (Shopify.itemsToAdd.length) {
    var item = Shopify.itemsToAdd.pop();

    _setText($addToCartBtn, _config.addingToCartBtnLabel);
    $addToCartBtn.addClass('disabled').prop('disabled', true);
    
    $.ajax({
      url: '/cart/add',
      dataType: 'json',
      type: 'post',
      data: item,
      success: function(itemData) {

        $addToCartBtn.addClass('inverted');
        _setText($addToCartBtn, _config.addedToCartBtnLabel);
        
        window.setTimeout(function(){
          $addToCartBtn.prop('disabled', false).removeClass('disabled').removeClass('inverted');
          _setText($addToCartBtn,_config.addToCartBtnLabel);
        }, _config.howLongTillBtnReturnsToNormal);

        $.getJSON(_config.shopifyAjaxCartURL, function(cart) {
          if (_config.cartCountSelector && $(_config.cartCountSelector).size()) {
            var value = $(_config.cartCountSelector).html() || '0';
            $(_config.cartCountSelector).html(value.replace(/[0-9]+/,cart.item_count)).removeClass('hidden-count');
          }
          if (_config.cartTotalSelector && $(_config.cartTotalSelector).size()) {
            if (typeof Currency !== 'undefined' && typeof Currency.moneyFormats !== 'undefined') {
              var newCurrency = '';
              if ($('[name="currencies"]').size()) {
                newCurrency = $('[name="currencies"]').val();
              }
              else if ($('#currencies span.selected').size()) {
                newCurrency = $('#currencies span.selected').attr('data-currency');
              }
              if (newCurrency) {
                $(_config.cartTotalSelector).html('<span class=money>' + Shopify.formatMoney(Currency.convert(cart.total_price, "{{ shop.currency }}", newCurrency), Currency.money_format[newCurrency]) + '</span>');
              } 
              else {
                $(_config.cartTotalSelector).html(Shopify.formatMoney(cart.total_price, "{{ shop.money_format | remove: "'" | remove: '"' }}"));
              }
            }
            else {
              $(_config.cartTotalSelector).html(Shopify.formatMoney(cart.total_price, "{{ shop.money_format | remove: "'" | remove: '"' }}"));
            }
          };
        });        
      },
      error: function() {}
    });
  }
};


Shopify.addItemEvent = function(addButton, variantId) {
  
  $('.add-to-cart-order-form').addClass('disabled').attr('disabled','disabled');

  Shopify.itemsToAdd = [];
  $('.quantity [data-id=' + variantId + ']').each(function() {
    var quantity = parseInt($(this).val(), 10);
    if (quantity) {
      Shopify.itemsToAdd.push( { id: variantId, quantity: quantity } );
    }
  }); 

  Shopify.addItemtoTheCart(addButton);
}

jQuery(function($) {

  $('.show-variants').click(function(e) {
    e.preventDefault();

    var $this = $(this);
    var productId = $this.data("id");

    var variant = $('.variants').filter('[data-id=' + productId + ']');
    variant.toggle();
  });

  $('table .quantity:first').focus();
  
  $('.add-to-cart').click(function() {
    Shopify.addItemEvent($(this).find("button"), $(this).find("button").data("id"));
  });
});
</script>
{% endif %}
